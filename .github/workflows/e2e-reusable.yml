name: Reusable e2e workflow

on:
  workflow_call:
    inputs:
      branch:
        description: 'GitHub branch to test.'
        required: false
        type: string
      user:
        description: 'User who kicked this off.'
        required: false
        type: string
        default: 'schedule'
      spec:
        description: 'Specify specs.'
        required: false
        default: 'e2e/*'
        type: string
      record:
        description: 'Record test run.'
        required: false
        default: true
        type: boolean
      parallel:
        description: 'Run tests in parallel.'
        required: false
        default: true
        type: boolean
      containers:
        description: 'Number of containers to run tests in.'
        required: false
        default: '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]'
        type: string
      pr_number:
        description: 'PR number to run tests for.'
        required: false
        type: number
    secrets:
      CYPRESS_RECORD_KEY:
        description: 'Cypress record key.'
        required: true
    outputs:
      tests_passed:
        description: 'True if all E2E tests passed, otherwise false'
        value: ${{ jobs.check_testing_matrix.outputs.all_tests_passed }}

jobs:
  # single job that generates and outputs a common id
  prepare:
    runs-on: ubuntu-latest
    outputs:
      uuid: ${{ steps.uuid.outputs.value }}
    steps:
      - name: Generate unique ID üíé
        id: uuid
        # take the current commit + timestamp together
        # the typical value would be something like
        # "sha-5d3fe...35d3-time-1620841214"
        run: echo "value=sha-$GITHUB_SHA-time-$(date +"%s")" >> $GITHUB_OUTPUT

      - name: Calculate Git Ref ü§î
        id: calculate_ref
        run: |
          if [ -n "${{ inputs.pr_number }}" ]; then
            echo "value=refs/pull/${{ inputs.pr_number }}/head" >> $GITHUB_OUTPUT
          else
            echo "value=${{ inputs.branch }}" >> $GITHUB_OUTPUT
          fi
  install:
    runs-on: ubuntu-latest
    needs: ['prepare']

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ steps.calculate_ref.outputs.value }}

      - uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0

      - name: Cache Cypress
        uses: actions/cache@v4
        id: cache-cypress
        with:
          path: |
            ~/.cache/Cypress
            ~/.pnpm-store
            ./packages/**/dist
          key: ${{ runner.os }}-cypress-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install dependencies
        if: steps.cache-cypress.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cypress build
        if: steps.cache-cypress.outputs.cache-hit != 'true'
        uses: cypress-io/github-action@1b70233146622b69e789ccdd4f9452adc638d25a # v6.6.1
        with:
          # Disable running of tests within install job
          runTests: false
          install: false
          build: pnpm build

      - name: Cypress install
        if: steps.cache-cypress.outputs.cache-hit != 'true'
        working-directory: cypress
        run: pnpm cypress:install

  testing:
    runs-on: ubuntu-latest
    needs: ['prepare', 'install']
    strategy:
      fail-fast: false
      matrix:
        # If spec is not e2e/* then we run only one container to prevent
        # running the same tests multiple times
        containers: ${{ fromJSON( inputs.spec == 'e2e/*' && inputs.containers || '[1]' ) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ steps.calculate_ref.outputs.value }}

      - uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0

      - name: Cache Cypress
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/Cypress
            ~/.pnpm-store
            ./packages/**/dist
          key: ${{ runner.os }}-cypress-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cypress run
        uses: cypress-io/github-action@0ee1130f05f69098ab5c560bd198fecf5a14d75b # v6.9.0
        with:
          working-directory: cypress
          install: false
          start: pnpm start
          wait-on: 'http://localhost:5678'
          wait-on-timeout: 120
          record: ${{ inputs.record }}
          parallel: ${{ fromJSON( inputs.spec == 'e2e/*' && inputs.parallel || false ) }}
          # We have to provide custom ci-build-id key to make sure that this workflow could be run multiple times
          # in the same parent workflow
          ci-build-id: ${{ needs.prepare.outputs.uuid }}
          spec: '${{ inputs.spec }}'
        env:
          NODE_OPTIONS: --dns-result-order=ipv4first
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          E2E_TESTS: true
          COMMIT_INFO_MESSAGE: üå≥ ${{ inputs.branch }} ü§ñ ${{ inputs.user }} üóÉÔ∏è ${{ inputs.spec }}
          SHELL: /bin/sh

  # Check if all tests passed and set the output variable
  check_testing_matrix:
    runs-on: ubuntu-latest
    needs: [testing]
    outputs:
      all_tests_passed: ${{ steps.all_tests_passed.outputs.result }}
    steps:
      - name: Check all tests passed
        id: all_tests_passed
        run: |
          success=true
          for status in ${{ needs.testing.result }}; do
            if [ $status != "success" ]; then
              success=false
              break
            fi
          done
          echo "::set-output name=result::$success"

name: Reusable units test workflow

on:
  workflow_call:
    inputs:
      ref:
        description: GitHub ref to test.
        required: false
        type: string
        default: master
      nodeVersion:
        description: Version of node to use.
        required: false
        type: string
        default: 20.x
      cacheKey:
        description: Cache key for modules and build artifacts.
        required: false
        default: ''
        type: string
      collectCoverage:
        required: false
        default: false
        type: boolean
      ignoreTurboCache:
        required: false
        default: false
        type: boolean
      skipFrontendTests:
        required: false
        default: false
        type: boolean

jobs:
  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest
    env:
      TURBO_FORCE: ${{ inputs.ignoreTurboCache }}
      COVERAGE_ENABLED: ${{ inputs.collectCoverage }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Use Node.js ${{ inputs.nodeVersion }}
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          check-latest: true

      - name: Check pnpm
        id: check-pnpm
        run: |
          echo "Installing pnpm..."
          npm install -g pnpm@10.2.1
          pnpm --version

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.STORE_PATH }}
            .pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache build artifacts
        uses: actions/cache@v3
        id: cache-build
        with:
          path: |
            packages/**/dist
            packages/**/build
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: pnpm build

      - name: Test Backend
        run: pnpm test:backend

      - name: Test Nodes
        run: pnpm test:nodes

      - name: Test Frontend
        if: ${{ !inputs.skipFrontendTests }}
        run: pnpm test:frontend

      - name: Collect and send coverage to Feishu
        if: inputs.collectCoverage
        run: |
          # 收集覆盖率数据
          COVERAGE_DATA=$(pnpm test:coverage --json)

          # 发送到飞书
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "msg_type": "text",
            "content": {
              "text": "单元测试覆盖率报告\n仓库: ${{ github.repository }}\n分支: ${{ inputs.ref }}\n提交: ${{ github.sha }}\n覆盖率数据:\n$COVERAGE_DATA\n构建链接: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
          }' \
          ${{ secrets.FEISHU_WEBHOOK_URL }}

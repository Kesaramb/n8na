name: Docker Custom Image CI
run-name: Build ${{ inputs.branch }} - ${{ inputs.user }}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'GitHub branch to create image off.'
        required: true
      tag:
        description: 'Name of the docker tag to create.'
        required: true
      merge-master:
        description: 'Merge with master.'
        type: boolean
        required: true
        default: false
      user:
        description: ''
        required: false
        default: 'none'
      start-url:
        description: 'URL to call after workflow is kicked off.'
        required: false
        default: ''
      success-url:
        description: 'URL to call after Docker Image got built successfully.'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Call Start URL - optionally
        if: ${{ github.event.inputs.start-url != '' }}
        run: curl -v -X POST -d 'url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}' ${{github.event.inputs.start-url}} || echo ""
        shell: bash

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Merge Master - optionally
        if: github.event.inputs.merge-master
        run: git remote add upstream https://github.com/n8n-io/n8n.git -f; git merge upstream/master --allow-unrelated-histories || echo ""
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Google Cloud
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build and push image
        uses: docker/build-push-action@v5
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          context: .
          file: ./docker/images/n8n-custom/Dockerfile
          build-args: |
            N8N_RELEASE_TYPE=development
          platforms: linux/amd64
          provenance: false
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY }}/n8n:${{ inputs.tag }}
            ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY }}/n8n:latest

      - name: Call Success URL - optionally
        if: ${{ github.event.inputs.success-url != '' }}
        run: curl -v ${{github.event.inputs.success-url}} || echo ""
        shell: bash

      - name: Notify Feishu
        if: always()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "msg_type": "text",
            "content": {
              "text": "Docker 镜像构建通知\n仓库: ${{ github.repository }}\n分支: ${{ github.event.inputs.branch }}\n标签: ${{ github.event.inputs.tag }}\n状态: ${{ job.status }}\n构建链接: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n镜像地址: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY }}/n8n:${{ inputs.tag }}"
            }
          }' \
          ${{ secrets.FEISHU_WEBHOOK_URL }}

# qa-automation/.env.sample
# Environment Configuration Template for n8n QA Automation
#
# Copy this file to .env in the root of your n8n project (if running locally)
# or use these variables to configure your Render.com service environment.
# For Render.com, it's recommended to use Environment Groups for secrets.
# This sample assumes an Environment Group named 'n8n-qa-secrets' as per render.yaml.

#-----------------------------------------------
# CORE N8N CONFIGURATION
#-----------------------------------------------
# n8n Host (Render sets this automatically, e.g., your-app.onrender.com)
# N8N_HOST=your-app.onrender.com

# n8n Port (Render sets PORT automatically, n8n will use it)
# N8N_PORT=5678
# PORT=5678 # Set by Render

# n8n Protocol (should be https when deployed)
N8N_PROTOCOL=https

# Webhook URL (Base URL for webhooks, Render sets this to N8N_HOST)
# WEBHOOK_URL=https://your-app.onrender.com

# Encryption key for credentials stored by n8n (MUST be a random 32-character string)
# Store in Render Environment Group: n8n-qa-secrets
N8N_ENCRYPTION_KEY=replace_with_a_32_character_random_string

# Timezone for scheduled workflows and date/time operations within n8n
GENERIC_TIMEZONE=UTC

#-----------------------------------------------
# TELEGRAM BOT CONFIGURATION
#-----------------------------------------------
# Your Telegram Bot token (obtained from BotFather)
# Store in Render Environment Group: n8n-qa-secrets
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Optional: Comma-separated list of numeric Telegram Chat IDs allowed to interact with the bot.
# If empty or not set, the bot might be open to more users (depending on workflow logic).
# Store in Render Environment Group: n8n-qa-secrets (mark as optional if not always used)
TELEGRAM_ALLOWED_CHAT_IDS=123456789,987654321

# Optional: Telegram Admin Username (for notifications or special commands, if implemented)
# TELEGRAM_ADMIN_USERNAME=your_telegram_admin_username

#-----------------------------------------------
# DEEPSEEK API CONFIGURATION
#-----------------------------------------------
# Your DeepSeek API key for code generation
# Store in Render Environment Group: n8n-qa-secrets
DEEPSEEK_API_KEY=your_deepseek_api_key_here

# DeepSeek API endpoint URL (default is usually fine)
DEEPSEEK_API_URL=https://api.deepseek.com/v1/generate

# DeepSeek model to use for code generation (e.g., deepseek-coder)
DEEPSEEK_MODEL=deepseek-coder

# Temperature for DeepSeek API (0.0-1.0, lower = more deterministic, higher = more creative)
DEEPSEEK_TEMPERATURE=0.2

#-----------------------------------------------
# CYPRESS & TESTING CONFIGURATION
#-----------------------------------------------
# Base URL for the Application Under Test (AUT) - the website your Cypress tests will target
# Store in Render Environment Group: n8n-qa-secrets
CYPRESS_BASE_URL=https://your_application_under_test.com

# Path for Cypress binary cache (important for Docker, helps with build times if persisted, but /tmp is fine for stateless runs)
CYPRESS_CACHE_FOLDER=/tmp/cy-cache

# Disable Cypress video recording to save resources (especially on free tiers)
CYPRESS_VIDEO=false

# Default viewport dimensions for Cypress tests
# CYPRESS_VIEWPORT_WIDTH=1280
# CYPRESS_VIEWPORT_HEIGHT=800

# Default command timeout for Cypress (milliseconds)
# CYPRESS_DEFAULT_TIMEOUT=15000

#-----------------------------------------------
# RENDER.COM SPECIFIC SETTINGS (Informational)
#-----------------------------------------------
# Render automatically sets IS_RENDER=true. This can be used in scripts if needed.
# IS_RENDER=true

#-----------------------------------------------
# SECURITY & AUTHENTICATION FOR N8N UI
#-----------------------------------------------
# Enable Basic Authentication for the n8n UI
N8N_BASIC_AUTH_ACTIVE=true

# Username for n8n Basic Auth
# Store in Render Environment Group: n8n-qa-secrets
N8N_BASIC_AUTH_USER=your_n8n_admin_username

# Password for n8n Basic Auth (choose a strong password)
# Store in Render Environment Group: n8n-qa-secrets
N8N_BASIC_AUTH_PASSWORD=your_strong_n8n_password

# JWT Secret for n8n's internal token generation (if applicable, use a random string)
# Store in Render Environment Group: n8n-qa-secrets
JWT_SECRET=replace_with_a_strong_random_jwt_secret

# Disable public API access to n8n unless specifically needed
N8N_PUBLIC_API_DISABLED=true

# Disable the initial n8n setup wizard after the first setup
N8N_SETUP_DISABLED=true

#-----------------------------------------------
# PERFORMANCE & MEMORY OPTIMIZATION (Crucial for Render Free Tier)
#-----------------------------------------------
# Limit Node.js heap size to prevent Out-Of-Memory errors on Render's free tier (512MB total RAM)
NODE_OPTIONS=--max-old-space-size=384

# Disable n8n's built-in diagnostics/telemetry to save resources
N8N_DIAGNOSTICS_ENABLED=false

# Limit the number of concurrent workflow executions (important for resource-constrained environments)
N8N_DEFAULT_CONCURRENCY=2

# Maximum execution time for a single workflow in seconds
EXECUTIONS_TIMEOUT=300

# How n8n handles workflow executions ('main' process is usually fine for smaller setups)
EXECUTIONS_PROCESS=main

# Pruning settings for execution data to save disk space on persistent storage
EXECUTIONS_DATA_PRUNE_MAX_COUNT=1000 # Max number of execution logs to keep
EXECUTIONS_DATA_MAX_AGE=24         # Max age of execution logs in hours (e.g., 24 for 1 day)

# Pruning settings for other database entries if applicable
DB_PRUNE_MAX_COUNT=1000
DB_PRUNE_MAX_AGE=336 # In hours (e.g., 336 for 14 days)

#-----------------------------------------------
# DATABASE CONFIGURATION (Using SQLite on Render's Persistent Disk)
#-----------------------------------------------
# Database type (sqlite is recommended for simplicity and free tier compatibility)
DB_TYPE=sqlite

# Path to the SQLite database file (ensure this path is on the persistent disk, e.g., /var/data/)
DB_SQLITE_PATH=/var/data/database.sqlite

# Enable Write-Ahead Logging (WAL) for SQLite for better performance and concurrency
DB_SQLITE_WAL_ENABLED=true

#-----------------------------------------------
# LOGGING CONFIGURATION
#-----------------------------------------------
# Log level for n8n (options: error, warn, info, verbose, debug)
LOG_LEVEL=info

# Log output format (json is good for log management systems, pretty for console)
LOG_FORMAT=json # or 'pretty'

# Optional: Log to file instead of console (ensure path is on persistent disk if used)
# LOG_OUTPUT=file
# LOG_FILE_PATH=/var/data/logs/n8n.log
# LOG_FILE_MAXSIZE=100 # Max size in MB
# LOG_FILE_MAXCOUNT=5  # Max number of log files to keep

#-----------------------------------------------
# WORKFLOW SPECIFIC VARIABLES (Add any custom env vars your workflows might need)
#-----------------------------------------------
# Example:
# MY_CUSTOM_WORKFLOW_SETTING=some_value
